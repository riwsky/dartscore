// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var $$Map = require("bs-platform/lib/js/map.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

var allTargets = /* :: */[
  /* Twenty */0,
  /* :: */[
    /* Nineteen */1,
    /* :: */[
      /* Eighteen */2,
      /* :: */[
        /* Seventeen */3,
        /* :: */[
          /* Sixteen */4,
          /* :: */[
            /* Fifteen */5,
            /* :: */[
              /* Bullseye */6,
              /* [] */0
            ]
          ]
        ]
      ]
    ]
  ]
];

function renderTarget(t) {
  switch (t) {
    case 0 : 
        return "20";
    case 1 : 
        return "19";
    case 2 : 
        return "18";
    case 3 : 
        return "17";
    case 4 : 
        return "16";
    case 5 : 
        return "15";
    case 6 : 
        return "BULL";
    
  }
}

function value(t) {
  switch (t) {
    case 0 : 
        return 20;
    case 1 : 
        return 19;
    case 2 : 
        return 18;
    case 3 : 
        return 17;
    case 4 : 
        return 16;
    case 5 : 
        return 15;
    case 6 : 
        return 25;
    
  }
}

function otherPlayer(x) {
  if (x !== 0) {
    return /* PlayerOne */0;
  } else {
    return /* PlayerTwo */1;
  }
}

function renderHitState(hs) {
  switch (hs) {
    case 0 : 
        return "";
    case 1 : 
        return "\\";
    case 2 : 
        return "X";
    case 3 : 
        return React.createElement("i", {
                    className: "times circle outline icon"
                  });
    
  }
}

var compare = Caml_obj.caml_compare;

var PlayerMap = $$Map.Make(/* module */[/* compare */compare]);

var compare$1 = Caml_obj.caml_compare;

var TargetMap = $$Map.Make(/* module */[/* compare */compare$1]);

var targetZero = List.fold_left((function (tm, t) {
        return Curry._3(TargetMap[/* add */3], t, /* Unhit */0, tm);
      }), TargetMap[/* empty */0], allTargets);

var empty_000 = /* scores */Curry._3(PlayerMap[/* add */3], /* PlayerTwo */1, 0, Curry._3(PlayerMap[/* add */3], /* PlayerOne */0, 0, PlayerMap[/* empty */0]));

var empty_001 = /* targetStates */Curry._3(PlayerMap[/* add */3], /* PlayerTwo */1, targetZero, Curry._3(PlayerMap[/* add */3], /* PlayerOne */0, targetZero, PlayerMap[/* empty */0]));

var empty = /* record */[
  empty_000,
  empty_001
];

function score(t, p) {
  return Curry._2(PlayerMap[/* find */21], p, t[/* scores */0]);
}

function targetState(t, p, tg) {
  return Curry._2(TargetMap[/* find */21], tg, Curry._2(PlayerMap[/* find */21], p, t[/* targetStates */1]));
}

function addPoints(p, pts, t) {
  var newScores = Curry._3(PlayerMap[/* add */3], p, score(t, p) + pts | 0, t[/* scores */0]);
  return /* record */[
          /* scores */newScores,
          /* targetStates */t[/* targetStates */1]
        ];
}

function afterHit(t, param) {
  var tg = param[1];
  var p = param[0];
  var match = targetState(t, p, tg);
  var match$1;
  switch (match) {
    case 0 : 
        match$1 = /* tuple */[
          0,
          /* OneHit */1
        ];
        break;
    case 1 : 
        match$1 = /* tuple */[
          0,
          /* TwoHits */2
        ];
        break;
    case 2 : 
        match$1 = /* tuple */[
          0,
          /* Closed */3
        ];
        break;
    case 3 : 
        var eligible = +(targetState(t, otherPlayer(p), tg) !== /* Closed */3);
        match$1 = /* tuple */[
          eligible !== 0 ? value(tg) : 0,
          /* Closed */3
        ];
        break;
    
  }
  var p$1 = p;
  var tg$1 = tg;
  var hs = match$1[1];
  var t$1 = addPoints(p, match$1[0], t);
  var newTargetMap = Curry._3(TargetMap[/* add */3], tg$1, hs, Curry._2(PlayerMap[/* find */21], p$1, t$1[/* targetStates */1]));
  return /* record */[
          /* scores */t$1[/* scores */0],
          /* targetStates */Curry._3(PlayerMap[/* add */3], p$1, newTargetMap, t$1[/* targetStates */1])
        ];
}

var Derived = /* module */[
  /* empty */empty,
  /* afterHit */afterHit,
  /* score */score,
  /* targetState */targetState
];

function s2e(prim) {
  return prim;
}

var component = ReasonReact.reducerComponent("App");

function make() {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (self) {
      var rows = $$Array.of_list(List.map((function (target) {
                  var hitStateCell = function (p) {
                    return React.createElement("td", {
                                className: "selectable"
                              }, React.createElement("a", {
                                    href: "#",
                                    onClick: (function () {
                                        return Curry._1(self[/* send */4], /* tuple */[
                                                    p,
                                                    target
                                                  ]);
                                      })
                                  }, renderHitState(targetState(self[/* state */2], p, target))));
                  };
                  return React.createElement("tr", undefined, hitStateCell(/* PlayerOne */0), React.createElement("td", {
                                  className: "target"
                                }, renderTarget(target)), hitStateCell(/* PlayerTwo */1));
                }), allTargets));
      return React.createElement("div", undefined, React.createElement("table", {
                      className: "ui celled table"
                    }, React.createElement("thead", undefined, React.createElement("tr", undefined, React.createElement("th", undefined, "Player One " + Pervasives.string_of_int(score(self[/* state */2], /* PlayerOne */0))), React.createElement("th", undefined, "Target"), React.createElement("th", undefined, "Player Two " + Pervasives.string_of_int(score(self[/* state */2], /* PlayerTwo */1))))), ReasonReact.createDomElement("tbody", {
                          className: "tb"
                        }, rows), React.createElement("tfoot", undefined)));
    });
  newrecord[/* initialState */10] = (function () {
      return empty;
    });
  newrecord[/* reducer */12] = (function (action, state) {
      return /* Update */Block.__(0, [afterHit(state, action)]);
    });
  return newrecord;
}

exports.allTargets = allTargets;
exports.renderTarget = renderTarget;
exports.value = value;
exports.otherPlayer = otherPlayer;
exports.renderHitState = renderHitState;
exports.Derived = Derived;
exports.s2e = s2e;
exports.component = component;
exports.make = make;
/* PlayerMap Not a pure module */
